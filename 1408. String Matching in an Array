class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        # 1. Define an array for output
        # 2. Check if substring exists in another word only if its length is less than the word
        # you will check
        
        # Approach 1:
        # a. Brute force for which time complexity seems O(n square)
        # b. If you find one substring present in at least one other, then stop checking for all
        # c. Sort the array and then start checking for elements ahead of it

        # ["as", "mass", "hero", "superhero"]
        # Thought: If I sort the array, my computations will be little less
        words.sort(key=len)
        output = []

        for i in range(len(words)):
            for j in range(i + 1, len(words)):
                if j < len(words) and len(words[i]) < len(words[j]) and words[i] in words[j]:
                    print(words[i])
                    output.append(words[i])
                    break

        return output
            
