class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        # thought: start with 1 and check if it's present. Move on accordingly. return element not present

        # case: [-1, -2, -3, <all neg>] -> above works
        # case: [1, 2, 0] -> above doesn't work since the loop will end before the soln is found. +1 in loop??
        # case: [3,4,-1,1] -> above works (2)
        # case: [7, 8, 9, 11, 12] -> above works
        # case: [1, 2, 3, 4, 5, 6, ..., n] -> assume all the elements are present from 1 to n... in this case, I am traversing through all n before I return n+1

        # 1 + 2 = 3
        # 1 + 3 = 4
        # 1 + 4 = 5
        # 1 + n = (n+1)

        # above looks stupid, but we are talking about index
        # i + (i+1) = (i+2)

        # case: [1, 2, 3, 4, 5, 6]

        # O(N), O(N)
        # smallest_positive = 1
        # nums_set = set(nums)
        # for i in range(len(nums) + 1):
        #     if smallest_positive not in nums_set:
        #         return smallest_positive
        #     smallest_positive += 1

        # O(N), O(1)
        # [1, 8, 9, 11, 12]
        n = len(nums)
        for i in range(len(nums)):
            while 0 < nums[i] <= n and nums[i] != nums[nums[i]-1]: # 4 != 3
                target = nums[nums[i]-1]
                nums[nums[i]-1] = nums[i]
                nums[i] = target
                
        for i in range(n):
            if nums[i] != i + 1:
                return i + 1

        return n + 1
        
        # [-1, 4, 3, 1]
        # [4, -1, 3, 1]
        # [4, 1, 3, -1]
