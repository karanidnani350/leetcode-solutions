class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        # s_map = {key: s.count(key) for key in set(s)}
        # t_map = {key: t.count(key) for key in set(t)}
        # print(s_map)

        # req
        # all keys of s must be present in t
        # all values of s must be present in t
        # keys order in both should be same... don't know how to do this so changing approach

        # two pointer method

        # for key, val in s_map.items():
        #     if (key, val) not in t_map.items():
        #         return False

        i = 0
        j = 0
        len_s = len(s)
        len_t = len(t)

        if len_s > len_t:
            return False
        while i < len(s) and j < len(t):
            if s[i] == t[j]:
                i += 1
                j += 1
            else:
                j += 1
        
        if len(s) == i:
            return True
        return False
